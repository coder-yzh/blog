(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{376:function(s,t,a){"use strict";a.r(t);var n=a(44),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h4",{attrs:{id:"合并两个有序链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并两个有序链表"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"https://leetcode-cn.com/problems/merge-two-sorted-lists/",target:"_blank",rel:"noopener noreferrer"}},[s._v("合并两个有序链表"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("将两个升序链表合并为一个新的 "),a("strong",[s._v("升序")]),s._v(" 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。")]),s._v(" "),a("p",[a("strong",[s._v("示例 1：")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg",alt:"img"}})]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("输入：l1 = [1,2,4], l2 = [1,3,4]\n输出：[1,1,2,3,4,4]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("strong",[s._v("示例 2：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("输入：l1 = [], l2 = []\n输出：[]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("strong",[s._v("示例 3：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("输入：l1 = [], l2 = [0]\n输出：[0]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("strong",[s._v("提示：")])]),s._v(" "),a("ul",[a("li",[s._v("两个链表的节点数目范围是 "),a("code",[s._v("[0, 50]")])]),s._v(" "),a("li",[a("code",[s._v("-100 <= Node.val <= 100")])]),s._v(" "),a("li",[a("code",[s._v("l1")]),s._v(" 和 "),a("code",[s._v("l2")]),s._v(" 均按 "),a("strong",[s._v("非递减顺序")]),s._v(" 排列")])]),s._v(" "),a("p",[a("strong",[s._v("AC代码")])]),s._v(" "),a("p",[s._v("法一：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Definition for singly-linked list.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# class ListNode:")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     def __init__(self, val=0, next=None):")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#         self.val = val")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#         self.next = next")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mergeTwoLists")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" l1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" l2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        prehead"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("ListNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        prev"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("prehead\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" l1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" l2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" l1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v("l2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                prev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("l1\n                l1"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("l1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("elif")]),s._v(" l1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("l2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                prev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("l2\n                l2"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("l2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),s._v("\n            prev"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("prev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),s._v("\n        prev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("l1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" l1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" l2\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" prehead"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),s._v("\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("ul",[a("li",[s._v("设定一个哨兵节点 "),a("code",[s._v("prehead")]),s._v(" ，这可以在最后比较容易地返回合并后的链表。")]),s._v(" "),a("li",[s._v("维护一个 "),a("code",[s._v("prev")]),s._v(" 指针，需要做的是调整它的 "),a("code",[s._v("next")]),s._v(" 指针。")]),s._v(" "),a("li",[s._v("我们重复以下过程，直到 "),a("code",[s._v("l1")]),s._v(" 或者 l2 指向了 null ：如果 "),a("code",[s._v("l1")]),s._v(" 当前节点的值小于等于 "),a("code",[s._v("l2")]),s._v(" ，我们就把 "),a("code",[s._v("l1")]),s._v(" 当前的节点接在 "),a("code",[s._v("prev")]),s._v(" 节点的后面同时将 "),a("code",[s._v("l1")]),s._v(" 指针往后移一位。否则，我们对 "),a("code",[s._v("l2")]),s._v(" 做同样的操作。不管我们将哪一个元素接在了后面，我们都需要把 "),a("code",[s._v("prev")]),s._v(" 向后移一位。")]),s._v(" "),a("li",[a("img",{attrs:{src:s.$withBase("/Leetcode/合并两个有序链表.jpg"),alt:"foo"}})])])])}),[],!1,null,null,null);t.default=e.exports}}]);