(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{385:function(e,t,r){"use strict";r.r(t);var a=r(44),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"traditional-methods-for-machine-learning-in-graphs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#traditional-methods-for-machine-learning-in-graphs"}},[e._v("#")]),e._v(" Traditional Methods for Machine Learning in Graphs")]),e._v(" "),r("h2",{attrs:{id:"_1-node-level-tasks-and-features"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-node-level-tasks-and-features"}},[e._v("#")]),e._v(" 1. Node-level Tasks and Features")]),e._v(" "),r("h3",{attrs:{id:"_1-1-node-level-tasks"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-node-level-tasks"}},[e._v("#")]),e._v(" 1.1 Node-level Tasks")]),e._v(" "),r("p",[e._v("1)Node classification")]),e._v(" "),r("h3",{attrs:{id:"_1-2-node-level-features"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-node-level-features"}},[e._v("#")]),e._v(" 1.2 Node-level Features")]),e._v(" "),r("h4",{attrs:{id:"_1-2-1-node-degree-度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-node-degree-度"}},[e._v("#")]),e._v(" 1.2.1 Node degree（度）")]),e._v(" "),r("h4",{attrs:{id:"_1-2-2-node-centrality-节点中心"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-node-centrality-节点中心"}},[e._v("#")]),e._v(" 1.2.2 Node centrality（节点中心）")]),e._v(" "),r("ul",[r("li",[e._v("Node centrality "),r("code",[e._v("c")]),e._v(" takes the node importance in a graph into account-"),r("strong",[e._v("考虑节点在图中的重要性")])]),e._v(" "),r("li",[e._v("建立重要性模型的不同方法:\n"),r("ul",[r("li",[e._v("Engienvector(特征向量) centrality\n"),r("ul",[r("li",[e._v("A node is important if "),r("strong",[e._v("surrounded by important")]),e._v(" "),r("strong",[e._v("neighboring nodes u∈N(v)")])]),e._v(" "),r("li",[e._v("the "),r("strong",[e._v("sum")]),e._v(" of the centrality of neighboring nodes")]),e._v(" "),r("li",[r("img",{attrs:{src:e.$withBase("/Machine Learning with Graphs/Eigenvector centrality.jpg"),alt:"mixureSecure"}})])])]),e._v(" "),r("li",[e._v("Betweenness(间隙) centrality\n"),r("ul",[r("li",[e._v("A node is important if "),r("strong",[e._v("it lies on many shortest paths between other nodes.")])]),e._v(" "),r("li",[r("img",{attrs:{src:e.$withBase("/Machine Learning with Graphs/Betweenness centrality.jpg"),alt:"mixureSecure"}})])])]),e._v(" "),r("li",[e._v("Closeness(紧密性) centrality\n"),r("ul",[r("li",[e._v("A node is important if "),r("strong",[e._v("it has small shortest path lengths to all other nodes.")])]),e._v(" "),r("li",[r("img",{attrs:{src:e.$withBase("/Machine Learning with Graphs/Closeness centrality.jpg"),alt:"mixureSecure"}})])])])])])]),e._v(" "),r("h4",{attrs:{id:"_1-2-3-clustering-coefficient-聚类系数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-clustering-coefficient-聚类系数"}},[e._v("#")]),e._v(" 1.2.3 Clustering coefficient（聚类系数）")]),e._v(" "),r("ul",[r("li",[r("img",{attrs:{src:e.$withBase("/Machine Learning with Graphs/Clustering coefficient.jpg"),alt:"mixureSecure"}})])]),e._v(" "),r("h4",{attrs:{id:"_1-2-4-graphlets"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-4-graphlets"}},[e._v("#")]),e._v(" 1.2.4 Graphlets")]),e._v(" "),r("ul",[r("li",[e._v("Rooted connected non-isomorphic\nsubgraphs(根连通非同构子图)")]),e._v(" "),r("li",[r("img",{attrs:{src:e.$withBase("/Machine Learning with Graphs/Graphlets-1.jpg"),alt:"mixureSecure"}})]),e._v(" "),r("li",[e._v("Graphlet Degree Vector (GDV)：表征节点V的邻里结构的向量，提供了一个节点的局部网络拓扑的度量")]),e._v(" "),r("li",[r("img",{attrs:{src:e.$withBase("/Machine Learning with Graphs/Graphlets-2.jpg"),alt:"mixureSecure"}})])]),e._v(" "),r("h4",{attrs:{id:"_1-2-5-summary"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-5-summary"}},[e._v("#")]),e._v(" 1.2.5 Summary")]),e._v(" "),r("p",[e._v("1、"),r("strong",[e._v("Goal")]),e._v("：Characterize the "),r("strong",[e._v("structure")]),e._v(" and "),r("strong",[e._v("position")]),e._v(" of a "),r("strong",[e._v("node")]),e._v(" in the network")]),e._v(" "),r("p",[e._v("2、不同特征的计算角度不同：")]),e._v(" "),r("ul",[r("li",[r("strong",[e._v("Degree")]),e._v(" counts #("),r("strong",[e._v("edges")]),e._v(") that a node touches")]),e._v(" "),r("li",[r("strong",[e._v("Clustering coefficient")]),e._v(" counts #("),r("strong",[e._v("triangles")]),e._v(") that a node touches.")]),e._v(" "),r("li",[r("strong",[e._v("GDV")]),e._v(" counts #("),r("strong",[e._v("graphlets")]),e._v(") that a node touches")])]),e._v(" "),r("p",[e._v("3、节点特征的获取方法可归类为：")]),e._v(" "),r("ul",[r("li",[r("strong",[e._v("Importance-based")]),e._v(" features\n"),r("ul",[r("li",[r("strong",[e._v("Node degree")]),e._v(" "),r("ul",[r("li",[e._v("Simply counts "),r("strong",[e._v("the number of neighboring nodes")])])])]),e._v(" "),r("li",[r("strong",[e._v("Different node centrality measures")]),e._v(" "),r("ul",[r("li",[e._v("Models "),r("strong",[e._v("importance of neighboring nodes")]),e._v(" in a graph")]),e._v(" "),r("li",[e._v("Different modeling choices: "),r("strong",[e._v("eigenvector centrality,")]),e._v(" "),r("strong",[e._v("betweenness centrality, closeness centrality")])])])]),e._v(" "),r("li",[e._v("实际应用：predicting celebrity users in a social network（预测社交网络中的名人用户）")])])]),e._v(" "),r("li",[r("strong",[e._v("Structure-based")]),e._v(" features\n"),r("ul",[r("li",[r("strong",[e._v("Node degree")]),e._v(" "),r("ul",[r("li",[e._v("Counts "),r("strong",[e._v("the number of neighboring nodes")])])])]),e._v(" "),r("li",[r("strong",[e._v("Clustering coefficient")]),e._v(" "),r("ul",[r("li",[e._v("Measures how "),r("strong",[e._v("connected neighboring nodes")]),e._v(" are")])])]),e._v(" "),r("li",[r("strong",[e._v("Graphlet count vector")]),e._v(" "),r("ul",[r("li",[e._v("Counts "),r("strong",[e._v("the occurrences of different graphlets")])])])]),e._v(" "),r("li",[e._v("实际应用：Predicting protein functionality in a protein-protein interaction network（预测蛋白质相互作用网络中的蛋白质功能）")])])])]),e._v(" "),r("hr"),e._v(" "),r("h2",{attrs:{id:"_2-link-level-tasks-and-features"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-link-level-tasks-and-features"}},[e._v("#")]),e._v(" 2. Link-level Tasks and Features")]),e._v(" "),r("h3",{attrs:{id:"_2-1-node-level-tasks"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-node-level-tasks"}},[e._v("#")]),e._v(" 2.1 Node-level Tasks")]),e._v(" "),r("p",[e._v("1)predict new links based on existing links：")]),e._v(" "),r("ul",[r("li",[e._v("Links missing at random（随机缺失链接）\n"),r("ul",[r("li",[e._v("Remove a random set of links and then aim to predict them")])])]),e._v(" "),r("li",[e._v("Links over time")])]),e._v(" "),r("h3",{attrs:{id:"_2-2-link-level-features"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-link-level-features"}},[e._v("#")]),e._v(" 2.2 Link-level Features")]),e._v(" "),r("h4",{attrs:{id:"_2-2-1-distance-based-feature"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-distance-based-feature"}},[e._v("#")]),e._v(" 2.2.1 Distance-based feature")]),e._v(" "),r("ul",[r("li",[r("strong",[e._v("Shortest-path distance")]),e._v(" between two nodes，即求两点间的"),r("strong",[e._v("最短路径")])]),e._v(" "),r("li",[r("strong",[e._v("缺陷")]),e._v("：does not capture how neighborhood overlaps，不能捕获"),r("strong",[e._v("邻里之间")]),e._v("是如何重叠的")])]),e._v(" "),r("h4",{attrs:{id:"_2-2-2-local-neighborhood-overlap"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-local-neighborhood-overlap"}},[e._v("#")]),e._v(" 2.2.2 Local neighborhood overlap")]),e._v(" "),r("ul",[r("li",[e._v("Captures how many neighboring nodes are shared by two nodes，即获取两个节点共享多少个相邻节点")]),e._v(" "),r("li",[e._v("有如下指标评定："),r("img",{attrs:{src:e.$withBase("/Machine Learning with Graphs/Local neighborhood overlap.jpg"),alt:"mixureSecure"}})]),e._v(" "),r("li",[e._v("但是存在缺陷：\n"),r("ul",[r("li",[e._v("Metric is always "),r("strong",[e._v("zero")]),e._v(" if the two nodes "),r("strong",[e._v("do not have any neighbors in common")])]),e._v(" "),r("li",[e._v("the "),r("strong",[e._v("two nodes")]),e._v(" may still "),r("strong",[e._v("potentially be connected")]),e._v(" in the future.")])])])]),e._v(" "),r("h4",{attrs:{id:"_2-2-3-global-neighborhood-overlap"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-global-neighborhood-overlap"}},[e._v("#")]),e._v(" 2.2.3 Global neighborhood overlap")]),e._v(" "),r("ul",[r("li",[e._v("如何计算两点间的所有路径数：Use "),r("strong",[e._v("adjacency matrix powers")]),e._v("，使用邻接矩阵幂："),r("img",{attrs:{src:e.$withBase("/Machine Learning with Graphs/compute paths.jpg"),alt:"mixureSecure"}})]),e._v(" "),r("li",[r("strong",[e._v("Katz index")]),e._v("：Sum over all path lengths，即对所有路径长度求和：\n"),r("ul",[r("li",[r("img",{attrs:{src:e.$withBase("/Machine Learning with Graphs/Katz index-1.jpg"),alt:"mixureSecure"}})])])]),e._v(" "),r("li",[e._v("Katz index matrix is computed in "),r("strong",[e._v("closed-form")]),e._v("：\n"),r("ul",[r("li",[r("img",{attrs:{src:e.$withBase("/Machine Learning with Graphs/Katz index-2.jpg"),alt:"mixureSecure"}})])])])]),e._v(" "),r("hr"),e._v(" "),r("h2",{attrs:{id:"_3-graph-level-tasks-and-features"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-graph-level-tasks-and-features"}},[e._v("#")]),e._v(" 3. Graph-level Tasks and Features")]),e._v(" "),r("h3",{attrs:{id:"_3-1-graph-level-tasks"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-graph-level-tasks"}},[e._v("#")]),e._v(" 3.1 Graph-level Tasks")]),e._v(" "),r("p",[r("strong",[e._v("Goal")]),e._v(": We want features that characterize the\nstructure of an entire graph.")]),e._v(" "),r("h3",{attrs:{id:"_3-2-background-kernel-methods"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-background-kernel-methods"}},[e._v("#")]),e._v(" 3.2 Background: Kernel Methods")]),e._v(" "),r("ul",[r("li",[r("strong",[e._v("Kernel methods")]),e._v("(核方法)：widely-used for traditional ML for "),r("strong",[e._v("graph-level prediction")])]),e._v(" "),r("li",[r("strong",[e._v("Idea")]),e._v(": "),r("strong",[e._v("Design kernels")]),e._v(" instead of feature vectors")])]),e._v(" "),r("h3",{attrs:{id:"_3-2-graph-level-features"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-graph-level-features"}},[e._v("#")]),e._v(" 3.2 Graph-level Features")]),e._v(" "),r("h4",{attrs:{id:"_3-2-1-graph-kernels"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-graph-kernels"}},[e._v("#")]),e._v(" 3.2.1 Graph Kernels")]),e._v(" "),r("p",[e._v("1、Measure similarity between two graphs，即测量两个图之间的相似性")]),e._v(" "),r("ul",[r("li",[e._v("Graphlet Kernel")]),e._v(" "),r("li",[e._v("Weisfeiler-Lehman Kernel")]),e._v(" "),r("li",[e._v("Random-walk kernel")]),e._v(" "),r("li",[e._v("Shortest-path graph kernel")])]),e._v(" "),r("p",[e._v("2、Graph Kernels-"),r("strong",[e._v("核心思想")])]),e._v(" "),r("ul",[r("li",[r("strong",[e._v("Goal")]),e._v(": Design graph feature vector "),r("code",[e._v("φ(G)")])]),e._v(" "),r("li",[r("strong",[e._v("Key idea")]),e._v(":  "),r("strong",[e._v("Bag-of-")]),e._v("*   for a graph\n"),r("ul",[r("li",[r("strong",[e._v("Bag-of-Words")]),e._v(" (BoW)\n"),r("ul",[r("li",[e._v("Regard nodes as words,以节点为词，"),r("code",[e._v("G")]),e._v("为"),r("strong",[e._v("节点个数")])]),e._v(" "),r("li",[r("img",{attrs:{src:e.$withBase("/Machine Learning with Graphs/Bag-of-Words.jpg"),alt:"mixureSecure"}})])])]),e._v(" "),r("li",[r("strong",[e._v("Bag of node degrees")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("G")]),e._v("为"),r("strong",[e._v("节点度数向量")])]),e._v(" "),r("li",[r("img",{attrs:{src:e.$withBase("/Machine Learning with Graphs/Bag-of-Words.jpg"),alt:"mixureSecure"}})])])]),e._v(" "),r("li",[r("strong",[e._v("Graphlet Kernel and Weisfeiler-Lehman (WL) Kernel")]),e._v(" use "),r("strong",[e._v("Bag-of-")]),e._v("* representation of graph，where *** is more sophisticated** than node degrees!")])])])]),e._v(" "),r("h4",{attrs:{id:"_3-2-2-graphlet-kernel"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-graphlet-kernel"}},[e._v("#")]),e._v(" 3.2.2 Graphlet Kernel")]),e._v(" "),r("ul",[r("li",[r("strong",[e._v("Key idea")]),e._v(": Count the "),r("strong",[e._v("number of different graphlets")]),e._v(" in a graph.")]),e._v(" "),r("li",[r("strong",[e._v("Note")]),e._v(": "),r("strong",[e._v("Definition of graphlets here")]),e._v(" is slightly "),r("strong",[e._v("different from node-level features")])]),e._v(" "),r("li",[r("strong",[e._v("step")]),e._v(":\n"),r("ul",[r("li",[e._v("get "),r("strong",[e._v("list of graphlets")]),e._v(" "),r("code",[e._v("g")]),e._v("："),r("img",{attrs:{src:e.$withBase("/Machine Learning with Graphs/list of graphlets.jpg"),alt:"mixureSecure"}})]),e._v(" "),r("li",[e._v("define the "),r("strong",[e._v("graphlet count vector")]),e._v(" "),r("code",[e._v("f")]),e._v(":"),r("img",{attrs:{src:e.$withBase("/Machine Learning with Graphs/graphlet count vector-1.jpg"),alt:"mixureSecure"}})]),e._v(" "),r("li",[r("img",{attrs:{src:e.$withBase("/Machine Learning with Graphs/graphlet count vector-2.jpg"),alt:"mixureSecure"}})]),e._v(" "),r("li",[e._v("given two graphs，"),r("code",[e._v("G")]),e._v(" and "),r("code",[e._v("G'")]),e._v(" ，compute "),r("strong",[e._v("graphlet kernel")]),e._v(" "),r("code",[e._v("K")]),e._v(":"),r("img",{attrs:{src:e.$withBase("/Machine Learning with Graphs/graphlet kernel.jpg"),alt:"mixureSecure"}}),e._v(" "),r("ul",[r("li",[e._v("if "),r("code",[e._v("G")]),e._v(" and "),r("code",[e._v("G‘")]),e._v("have "),r("strong",[e._v("different sizes")]),e._v("，we need to "),r("strong",[e._v("normalize each feature vector")]),e._v("，即对特征向量进行归一化 "),r("img",{attrs:{src:e.$withBase("/Machine Learning with Graphs/normalize .jpg "),alt:"mixureSecure"}})])])])])]),e._v(" "),r("li",[r("strong",[e._v("Limitations")]),e._v("：Counting graphlets is "),r("strong",[e._v("expensive")]),e._v("，即计算量太大。因为subgraph isomorphism test（子图同构检验-判断一个图是否是另一个图的子图)是"),r("strong",[e._v("NP-hard问题")])])]),e._v(" "),r("h4",{attrs:{id:"_3-2-3-graphlet-kernel"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-3-graphlet-kernel"}},[e._v("#")]),e._v(" 3.2.3 Graphlet Kernel")]),e._v(" "),r("ul",[r("li",[r("strong",[e._v("Goal")]),e._v(": design an efficient graph feature\ndescriptor "),r("code",[e._v("φ(G)")])]),e._v(" "),r("li",[r("strong",[e._v("Idea")]),e._v(": use neighborhood structure to\niteratively enrich node vocabulary，即利用"),r("strong",[e._v("邻域结构")]),e._v("迭代丰富节点词汇")]),e._v(" "),r("li",[r("strong",[e._v("Color refinement Algorithm step")]),e._v(" "),r("ul",[r("li",[r("img",{attrs:{src:e.$withBase("/Machine Learning with Graphs/Color refinement.jpg"),alt:"mixureSecure"}})]),e._v(" "),r("li",[r("strong",[e._v("note")]),e._v(":初始化图中所有节点"),r("code",[e._v("v")]),e._v("的颜色，记为第"),r("code",[e._v("0")]),e._v("次迭代。通过第"),r("code",[e._v("k+1")]),e._v("次迭代，hash表映射，产生新的颜色给第"),r("code",[e._v("v")]),e._v("个节点，其中第"),r("code",[e._v("k+1")]),e._v("次迭代后的v节点的颜色，由第"),r("code",[e._v("k")]),e._v("次迭代后的v节点的颜色以及第k次迭代后的v邻接节点的颜色决定。")]),e._v(" "),r("li",[r("strong",[e._v("Example")]),e._v("：\n"),r("ul",[r("li",[e._v("初始化节点颜色为1:"),r("img",{attrs:{src:e.$withBase("/Machine Learning with Graphs/Color refinement Example-1.jpg"),alt:"mixureSecure"}})]),e._v(" "),r("li",[e._v("迭代"),r("strong",[e._v("第一次")]),e._v("，将节点上的颜色修改为迭代后的新颜色:"),r("img",{attrs:{src:e.$withBase("/Machine Learning with Graphs/Color refinement Example-2.jpg"),alt:"mixureSecure"}})]),e._v(" "),r("li",[e._v("迭代"),r("strong",[e._v("第二次")]),e._v("，将节点上的颜色修改为迭代后的新颜色:"),r("img",{attrs:{src:e.$withBase("/Machine Learning with Graphs/Color refinement Example-3.jpg"),alt:"mixureSecure"}})]),e._v(" "),r("li",[e._v("迭代"),r("strong",[e._v("第三次")]),e._v("，将节点上的颜色修改为迭代后的新颜色:"),r("img",{attrs:{src:e.$withBase("/Machine Learning with Graphs/Color refinement Example-4.jpg"),alt:"mixureSecure"}})]),e._v(" "),r("li",[e._v("得到对应的 "),r("code",[e._v("φ(G)")]),e._v(":"),r("img",{attrs:{src:e.$withBase("/Machine Learning with Graphs/Color refinement Example-5.jpg"),alt:"mixureSecure"}})]),e._v(" "),r("li",[e._v("计算 "),r("code",[e._v("K(G,G')")]),e._v(":"),r("img",{attrs:{src:e.$withBase("/Machine Learning with Graphs/Color refinement Example-6.jpg"),alt:"mixureSecure"}})])])])])]),e._v(" "),r("li",[r("strong",[e._v("Advantages")]),e._v(": computationally efficient , time complexity is "),r("strong",[e._v("linear in #(edges)")]),e._v(",即时间复杂度是"),r("strong",[e._v("线性")]),e._v("的和"),r("strong",[e._v("边")]),e._v("有关")])]),e._v(" "),r("h2",{attrs:{id:"_4-summary"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-summary"}},[e._v("#")]),e._v(" 4. Summary")]),e._v(" "),r("h3",{attrs:{id:"_4-1-traditional-ml-pipeline"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-traditional-ml-pipeline"}},[e._v("#")]),e._v(" 4.1 Traditional ML Pipeline")]),e._v(" "),r("ul",[r("li",[e._v("构思节点/链接/图的特征-Design features for nodes/links/graphs")]),e._v(" "),r("li",[e._v("获取所有训练数据的特征-Obtain features for all training data")]),e._v(" "),r("li",[e._v("Hand-crafted feature + ML model")])]),e._v(" "),r("h3",{attrs:{id:"_4-2-hand-crafted-features-for-graph-data"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-hand-crafted-features-for-graph-data"}},[e._v("#")]),e._v(" 4.2. Hand-crafted features for graph data")]),e._v(" "),r("p",[r("strong",[e._v("Node-level:")])]),e._v(" "),r("ul",[r("li",[e._v("Node degree, centrality, clustering coefficient, graphlets")])]),e._v(" "),r("p",[r("strong",[e._v("Link-level:")])]),e._v(" "),r("ul",[r("li",[e._v("Distance-based feature\nlocal/global neighborhood overlap")])]),e._v(" "),r("p",[r("strong",[e._v("Graph-level:")])]),e._v(" "),r("ul",[r("li",[e._v("Graphlet kernel, WL kernel")])])])}),[],!1,null,null,null);t.default=s.exports}}]);